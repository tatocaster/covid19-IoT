plugins {
    id 'io.gitlab.arturbosch.detekt' version '1.4.0'
    id 'org.jlleitschuh.gradle.ktlint' version '9.1.1'
    id 'com.novoda.static-analysis' version '1.2'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "me.tatocaster.covid_19geocount"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "me.tatocaster.covid_19geocount.CustomRunner"
        testOptions.unitTests.includeAndroidResources = true
        vectorDrawables.useSupportLibrary = true

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'
            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"
            pseudoLocalesEnabled true
        }

        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        sourceSets.debug.resources.srcDirs = ['src/debug/res']
    }

    lintOptions {
        disable('AllowBackup', 'GoogleAppIndexingWarning', 'MissingApplicationIcon')
    }
}

staticAnalysis {

    penalty none

    lintOptions {
        lintConfig rootProject.file('team-props/lint-config.xml')
        checkReleaseBuilds false
        warningsAsErrors true
    }

    detekt {
        config = rootProject.files('team-props/detekt-config.yml')
    }

    ktlint {
        android.set(true)
        reporters {
            reporter "checkstyle"
            reporter "json"
        }

        includeVariants { variant -> variant.name.contains('debug') }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    rootProject.app.each { item ->
        add(item.configuration, item.dependency, item.options)
    }
    rootProject.unitTestsDependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }
    rootProject.instrumentationTestsDependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }
    rootProject.kaptDependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }

}
